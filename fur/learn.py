# AUTOGENERATED! DO NOT EDIT! File to edit: full_dataset_style.ipynb (unless otherwise specified).

__all__ = ['save_file_from_url', 'mk_model_dir', 'SaveFeatures', 'save_file_from_url', 'mk_model_dir', 'SaveFeatures',
           'save_file_from_url', 'images_df', 'mk_model_dir', 'SaveFeatures']

# Cell
import pandas as pd
from pymongo import MongoClient
from pathlib import Path
import shutil
from mytools.tools import *
from .paths import *
from annoy import AnnoyIndex

from fastai.vision.all import *

import nested_lookup

# Cell
def save_file_from_url(url, fname):
    r = requests.get(url, allow_redirects=True)
    open(fname, 'wb').write(r.content)

# Cell
def mk_model_dir(learner_name):
    model_name = f'model_{learner_name}_{pd.Timestamp.now()}'
    model_path = models_path/model_name
    if not model_path.is_dir(): model_path.mkdir()
    return model_path

# Cell
# this is a hook (learned about it here: https://forums.fast.ai/t/how-to-find-similar-images-based-on-final-embedding-layer/16903/13)
# hooks are used for saving intermediate computations
class SaveFeatures():
    features=None
    def __init__(self, m):
        self.hook = m.register_forward_hook(self.hook_fn)
        self.features = None
    def hook_fn(self, module, input, output):
        out = output.detach().cpu().numpy()
        if isinstance(self.features, type(None)):
            self.features = out
        else:
            self.features = np.row_stack((self.features, out))
    def remove(self):
        self.hook.remove()

# Cell
import pandas as pd
from pymongo import MongoClient
from pathlib import Path
import shutil
from mytools.tools import *
from .paths import *
from annoy import AnnoyIndex

from fastai.vision.all import *

import nested_lookup

# Cell
def save_file_from_url(url, fname):
    r = requests.get(url, allow_redirects=True)
    open(fname, 'wb').write(r.content)

# Cell
def mk_model_dir(learner_name):
    model_name = f'model_{learner_name}_{pd.Timestamp.now()}'
    model_path = models_path/model_name
    if not model_path.is_dir(): model_path.mkdir()
    return model_path

# Cell
# this is a hook (learned about it here: https://forums.fast.ai/t/how-to-find-similar-images-based-on-final-embedding-layer/16903/13)
# hooks are used for saving intermediate computations
class SaveFeatures():
    features=None
    def __init__(self, m):
        self.hook = m.register_forward_hook(self.hook_fn)
        self.features = None
    def hook_fn(self, module, input, output):
        out = output.detach().cpu().numpy()
        if isinstance(self.features, type(None)):
            self.features = out
        else:
            self.features = np.row_stack((self.features, out))
    def remove(self):
        self.hook.remove()

# Cell
import pandas as pd
from pymongo import MongoClient
from pathlib import Path
import shutil
from mytools.tools import *
from .paths import *
from annoy import AnnoyIndex

from fastai.vision.all import *

import nested_lookup
from IPython.display import Image,display

# Cell
def save_file_from_url(url, fname):
    r = requests.get(url, allow_redirects=True)
    open(fname, 'wb').write(r.content)

# Cell
def images_df():
    pics_path = ssd_pictures_path
#     pics_path = Path('/home/dima/houzz_parse/PICS')
    mongo_connect = MongoClient('mongodb://localhost:27017')
    mongodb = mongo_connect['houzz']
    cursor =mongodb['FurnitureItem'].find()
    data = list(cursor)
    pics = pd.DataFrame(list(pics_path.ls()),columns=['paths'])
    pics['file_name'] = pics['paths'].apply(lambda x:x.name)
    pics['image'] = pics['file_name'].str.split('_').str[0]
    data_filtered = nested_lookup.nested_delete(data,'url_img_product')
    img_keys = nested_lookup.nested_lookup('url_img_product',data)
    img_keys = [list(item.keys()) for item in img_keys]
    df = pd.json_normalize(data_filtered)
    df.columns = [c.split('.')[1] if len(c.split('.'))>1 else c for c in df.columns ]
    df['image'] = img_keys
    df = df.explode('image')
    df = pics.merge(df,on='image')
    df = df.drop_duplicates('image').reset_index(drop=True)
    df.columns = df.columns.str.lower()
    return df.drop(columns=['file_name','image','_id'])

# Cell
def mk_model_dir(learner_name):
    model_name = f'model_{learner_name}_{pd.Timestamp.now()}'
    model_path = models_path/model_name
    if not model_path.is_dir(): model_path.mkdir()
    return model_path

# Cell
# this is a hook (learned about it here: https://forums.fast.ai/t/how-to-find-similar-images-based-on-final-embedding-layer/16903/13)
# hooks are used for saving intermediate computations
class SaveFeatures():
    features=None
    def __init__(self, m):
        self.hook = m.register_forward_hook(self.hook_fn)
        self.features = None
    def hook_fn(self, module, input, output):
        out = output.detach().cpu().numpy()
        if isinstance(self.features, type(None)):
            self.features = out
        else:
            self.features = np.row_stack((self.features, out))
    def remove(self):
        self.hook.remove()